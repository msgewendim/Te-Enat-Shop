openapi: "3.1.0"
info:
  title: "Ethiopian Cuisine Products and Recipes Store API"
  version: "1.0.0"
  description: "This API allows users to explore and purchase authentic Ethiopian cuisine products and discover traditional recipes. The API provides routes to manage products, users, and shopping carts, ensuring a seamless shopping and culinary experience for those interested in Ethiopian culture and cuisine."
servers:
  - url: "http://localhost:3005/api"
    description: Development server
  - url: "https://te-enat-shop-api.onrender.com/api"
    description: Production server

paths:
  /products:
    get:
      summary: Get all products
      tags:
        - Products
      operationId: getAllProducts
      responses:
        200:
          description: A list of 9 products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      summary: Add a new product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        201:
          description: Product created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/{id}:
    get:
      summary: Get a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          description: The product ID
          schema:
            type: string
      operationId: getProduct
      responses:
        200:
          description: A single product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          description: The product ID
          schema:
            type: string
      responses:
        204:
          description: Product deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          description: The product ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200:
          description: Product updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/top-products:
    get:
      summary: Get top products
      tags:
        - Products
      operationId: getTopProducts
      responses:
        200:
          description: A list of top products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RandomItemsResponse"
        404:
          description: Products not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /recipes:
    get:
      summary: Get all recipes
      tags:
        - Recipes
      operationId: getAllRecipes
      responses:
        200:
          description: A list of recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
    post:
      summary: Add a new recipe
      tags:
        - Recipes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipe"
      responses:
        201:
          description: Recipe created
        400:
          description: Invalid input

  /recipes/{id}:
    get:
      summary: Get a recipe by ID
      tags:
        - Recipes
      parameters:
        - in: path
          name: id
          required: true
          description: The recipe ID
          schema:
            type: string
      operationId: getRecipe
      responses:
        200:
          description: A single recipe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a recipe by ID
      tags:
        - Recipes
      parameters:
        - in: path
          name: id
          required: true
          description: The recipe ID
          schema:
            type: string
      responses:
        204:
          description: Recipe deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a recipe by ID
      tags:
        - Recipes
      parameters:
        - in: path
          name: id
          required: true
          description: The recipe ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipe"
      responses:
        200:
          description: Recipe updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /recipes/top-recipes:
    get:
      summary: Get top recipes
      tags:
        - Recipes
      operationId: getTopRecipes
      responses:
        200:
          description: A list of top recipes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RandomItemsResponse"
        404:
          description: Recipes not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /packages:
    get:
      summary: Get all packages
      tags:
        - Packages
      operationId: getAllPackages
      responses:
        200:
          description: A list of packages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Package"
    post:
      summary: Add a new package
      tags:
        - Packages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Package"
      responses:
        201:
          description: Package created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /packages/{id}:
    get:
      summary: Get a package by ID
      tags:
        - Packages
      parameters:
        - in: path
          name: id
          required: true
          description: The package ID
          schema:
            type: string
      operationId: getPackage
      responses:
        200:
          description: A single package
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Package not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a package by ID
      tags:
        - Packages
      parameters:
        - in: path
          name: id
          required: true
          description: The package ID
          schema:
            type: string
      responses:
        204:
          description: Package deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Package not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a package by ID
      tags:
        - Packages
      parameters:
        - in: path
          name: id
          required: true
          description: The package ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Package"
      responses:
        200:
          description: Package updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Package not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /packages/top-packages:
    get:
      summary: Get top packages
      tags:
        - Packages
      operationId: getTopPackages
      responses:
        200:
          description: A list of top packages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RandomItemsResponse"
        404:
          description: Packages not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders/generate-sale:
    post:
      summary: get payment form information from Morning
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
            $ref: "#/components/schemas/PaymentFormPayload"
      responses:
        200:
          description: get Payment Form successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentFormSuccessResponse"
        400:
          description: Error getting payment form
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentFormErrorResponse"

  /orders/payment/status:
    get:
      summary: Get payment success page information from Morning
      tags:
        - Payments
      responses:
        200:
          description: get Payment status Success successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: "succeeded is true"
                  message:
                    type: string
                    example: "Payment successful!"
        400:
          description: Error getting payment status success
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to get payment status"
                  message:
                    type: string
                    example: "Failed to get payment status!"

  /orders:
    get:
      summary: Get all orders
      tags:
        - Orders
      operationId: getAllOrders
      responses:
        200:
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        404:
          description: Orders not found

  /orders/notify:
    post:
      summary: Notify about payment success
      tags:
        - Orders
      responses:
        200:
          description: Payment successful
        400:
          description: Payment failed

  /users:
    post:
      summary: Update user information
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: User updated in db
        400:
          description: Error updating user

  /users/addToCart:
    post:
      summary: Add to cart
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        201:
          description: Product added to cart
        400:
          description: Error adding product to cart

components:
  schemas:
    Product:
      type: object
      required:
        - _id
        - name
        - shortDescription
        - pricing
        - image
        - categories
        - features
      properties:
        _id:
          type: string
          description: The unique identifier for the product.
          example: "60d21b4667d0d8992e610c85"
        name:
          type: string
          description: The name of the product.
          example: "Awesome Gadget"
        shortDescription:
          type: string
          description: A brief description of the product.
          example: "A multi-functional gadget that makes your life easier."
        pricing:
          type: array
          description: An array of pricing and sizes options for the product.
          items:
            type: object
            properties:
              size:
                type: ProductSize
                description: The weight option for the product.
              price:
                type: number
                format: float
                description: The price of the product for the given size.
                example: 19.99
            required:
              - size
              - price
        image:
          type: string
          description: A URL link for the product Image.
          format: uri
          example: "https://example.com/product-image.jpg"
        categories:
          type: array
          description: A list of category names the product belongs to.
          items:
            $ref: "#/components/schemas/Category"
        subCategories:
          type: array
          description: A list of sub-category names the product belongs to.
          items:
            $ref: "#/components/schemas/SubCategory"
        features:
          type: object
          description: An optional list of benefits associated with the product.
          properties:
            _id:
              type: string
              description: The unique identifier for the feature.
            value:
              type: array
              items:
                type: Feature
          required:
            - id
            - value
        totalSales:
          type: integer
          description: An optional field for the total number of sales.
          example: 5000

    ProductSize:
      type: object
      properties:
        sizeName:
          type: string
        sizeQuantity:
          type: number
      required:
        - sizeName
        - sizeQuantity

    Feature:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
      required:
        - title
        - description

    Package:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        image:
          type: string
        price:
          type: integer
          format: float
        cookingTime:
          type: integer
          format: int
        ingredientsQuantity:
          type: integer
          format: int
        peoplesQuantity:
          type: integer
          format: int
      required:
        - _id
        - name
        - image
        - price
        - cookingTime
        - ingredientsQuantity
        - peoplesQuantity

    PaymentFormPayload:
      type: object
      properties:
        totalPrice:
          type: number
          format: float
        customer:
          type: Customer
        orderItems:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
      required:
        - totalPrice
        - customer
        - orderItems

    Customer:
      type: object
      properties:
        firstName:
          type: string
        lastName: 
          type: string
        phone: 
          type: string
          description: "Customer phone number"
          format: phone
        email:
          type: string
          description: "Customer email address"
          format: email
        address:
          type: Address
        notes: 
          type: string
          description: "Customer notes"
      required:
        - firstName
        - lastName
        - phone
        - email
        - address
        - notes
    
    Address:
      type: object
      properties:
        street:
          type: string
        streetNum:
          type: string
        city:
          type: string
        postal_code:
          type: string
      required:
        - street
        - streetNum
        - city

    PaymentFormSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        url:
          type: string
        errorCode:
          type: integer
          description: Error code if the payment failed
        errorMessage:
          type: string
        orderId:
          type: string
          description: ID of the order created for the payment
      required:
        - errorCode
        - errorMessage
        - success
        - url
        - orderId

    PaymentFormErrorResponse:
      type: object
      properties:
        errorCode:
          type: integer
          description: Error code if the payment failed
        errorMessage:
          type: string
          description: Description of the error if the payment failed
        orderId:
          type: string
          description: ID of the order created for the payment, if the payment failed
      required:
        - errorCode
        - errorMessage
        - orderId

    User:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the user
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        profilePicture:
          type: string
          nullable: true
          description: URL to the user's profile picture
        savedRecipes:
          type: array
          items:
            $ref: "#/components/schemas/Recipe"
        orderHistory:
          type: array
          items:
            $ref: "#/components/schemas/Order"
        wishlist:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        cart:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/Address"
        createdAt:
          type: string
          format: date-time
        isAdmin:
          type: boolean
          nullable: true
          description: Indicates if the user has administrative privileges
      required:
        - _id
        - username
        - email
        - isAdmin

    Order:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the order
        customer:
          type: Customer
        orderItems:
          type: array
          items:
            type: CartItem
        totalPrice:
          type: number
          format: float
        paymentStatus:
          type: string
          enum: ["pending", "succeeded", "failed"]
          default: "pending"
        orderStatus:
          type: string
          enum: ["pending", "processing", "shipped", "delivered", "cancelled"]
          default: "pending"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - customer
        - orderItems
        - totalPrice
        - paymentStatus
        - orderStatus

    CartItem:
      type: object
      properties:
        item:
          oneOf:
            - $ref: "#/components/schemas/Product"
            - $ref: "#/components/schemas/Package"
          description: The item in the cart
        quantity:
          type: integer
          description: Quantity of the product in the cart
        size:
          type: string
          description: Size of the product in grams or kg
        price:
          type: number
          format: float
          description: Price of the product in the cart
        itemType:
          type: string
          enum: ["Product", "Package"]
          description: Type of the item (Product or Package)
          example: "Product"
        name:
          type: string
          description: Name of the product
        image:
          type: string
          description: URL to the product image
      required:
        - item
        - quantity
        - size
        - price
        - itemType
        - name
    
    Recipe:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the recipe
        name:
          type: string
          description: Name of the recipe
        description:
          type: string
          description: A brief description of what the recipe is about
        image:
          type: string
          description: URL to an image of the recipe
        ingredients:
          type: array
          items:
            type: Ingredient
        instructions:
          type: array
          items:
            $ref: "#/components/schemas/Instruction"
        servings:
          type: integer
          description: Number of servings the recipe can be prepared for
        prepTime:
          type: string
          description: Preparation time for the recipe (e.g., "30 minutes")
        difficulty:
          type: string
          enum: ["Easy", "Medium", "Hard"]
          description: Difficulty level of the recipe
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
            description: Names of categories the recipe belongs to
        createdAt:
          type: string
          format: date-time
      required:
        - _id
        - name
        - description
        - image
        - ingredients
        - instructions
        - servings
        - prepTime
        - difficulty
        - createdAt
        - categories

    Category:
      type: object
      properties:
        nameInHebrew:
          type: string
          description: "The name of the product category in Hebrew"
          example: "תבלינים"
        nameInEnglish:
          type: string
          description: "The value of the product category in English"
          example: "Spices"
      required:
        - nameInHebrew
        - nameInEnglish

    SubCategory:
      type: object
      properties:
        nameInHebrew:
          type: string
        nameInEnglish:
          type: string
        nameOfParentCategory:
          type: string
      required:
        - nameInHebrew
        - nameInEnglish
        - nameOfParentCategory

    Ingredient:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the ingredient In DB
        name:
          type: string
        quantity:
          type: string
          description: Amount of the ingredient required (e.g., "1 cup", "2 tbsp")
        existsInProducts:
          type: boolean
          default: false
          description: Indicates if the ingredient exists in the products collection
      required:
        - name
        - quantity
        - existsInProducts

    Instruction:
      type: object
      properties:
        step:
          type: integer
        description:
          type: string
        _id:
          type: string
      required:
        - step
        - description

    RandomItemsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: RandomItemData
      required:
        - success
        - message
        - data

    RandomItemData:
      type: object
      properties:
        items:
          type: array
          items:
            type: RandomItem
        currentPage:
          type: integer
        totalPages:
          type: integer
      required:
        - items
        - currentPage
        - totalPages

    RandomItem:
      oneOf:
        - $ref: "#/components/schemas/Product"
        - $ref: "#/components/schemas/Recipe"
        - $ref: "#/components/schemas/Package"

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          oneOf:
            - type: object
              $ref: "#/components/schemas/RandomItem"
            - type: array
              items:
                $ref: "#/components/schemas/RandomItem"
      required:
        - success
        - message
        - data

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      required:
        - success
        - message
